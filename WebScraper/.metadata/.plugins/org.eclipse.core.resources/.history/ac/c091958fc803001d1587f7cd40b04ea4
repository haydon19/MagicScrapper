import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.awt.event.*;
import java.util.List;
import java.awt.image.*;
import java.net.URL;
import javax.imageio.*;
import java.io.*;

public class Gui extends JFrame{

    //public String cardSearch;
    public List<String> theList;
    public JLabel imageLabel;
    public List<MagicCard> queryCardSearchList;
    public List<String> queryCardList;
	private JPanel contentPane;
	private JTextField searchBar;

    public Gui(final CardCollection collection){

    	/*
        //Creating the Frame
        JFrame frame = new JFrame("GoldFish MTG Frame");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600,600);

        //Creating the MenuBar and adding components
        JMenuBar menubar = new JMenuBar();
        JMenu menuFile = new JMenu("File");
        JMenu menuRefresh = new JMenu("Refresh");
        JMenu menuHelp = new JMenu("Help");
        menubar.add(menuFile);
        menubar.add(menuRefresh);
        menubar.add(menuHelp);
        JMenuItem menuFileOpen = new JMenuItem("Open");
        JMenuItem menuFileSaveAs = new JMenuItem("Save as");
        menuFile.add(menuFileOpen);
        menuFile.add(menuFileSaveAs);
     
        //Creating the panel at bottom and adding components
        JPanel panel = new JPanel(); // the panel is not visible in output
        
        //TheList
        theList = new DefaultListModel(); // accepts up to 10 characters
        //Add elements to theList
        addMagicCardsToList(collection);
        JList<String> list = new JList<String>(theList);
        
        queryList = new DefaultListModel<String>();
        queryCardList = new ArrayList<MagicCard>();
        final JList<String> qL = new JList<String>(queryList);
        final JLabel qLimageLabel = new JLabel();
        imageLabel = new JLabel();
        final JTextField searchBar = new JTextField("Search card...     ");
        panel.add(list);
        panel.add(imageLabel);
        panel.add(searchBar);
        panel.add(qL);
        panel.add(qLimageLabel);

        //Adding Components to the frame.

        //frame.getContentPane().add(tabbedPane);
        
        frame.getContentPane().
                add(BorderLayout.SOUTH, panel);
        frame.getContentPane().
                add(BorderLayout.NORTH, menubar);
        frame.getContentPane().
                add(BorderLayout.LINE_START, list);
        frame.getContentPane().
                add(BorderLayout.LINE_END, imageLabel);

        frame.setVisible(true);

        searchBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                searchBar.setText("");
            }
        });
*/		
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setBounds(100, 100, 800, 500);
	contentPane = new JPanel();
	contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
	contentPane.setLayout(new BorderLayout(0, 0));
	setContentPane(contentPane);
	
	JPanel DeckListPanel = new JPanel();
	contentPane.add(DeckListPanel, BorderLayout.WEST);
	GridBagLayout gbl_DeckListPanel = new GridBagLayout();
	gbl_DeckListPanel.columnWidths = new int[]{43, 0};
	gbl_DeckListPanel.rowHeights = new int[]{14, 48, 0};
	gbl_DeckListPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
	gbl_DeckListPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
	DeckListPanel.setLayout(gbl_DeckListPanel);
	
	JLabel DeckListLabel = new JLabel("Deck List");
	GridBagConstraints gbc_DeckListLabel = new GridBagConstraints();
	gbc_DeckListLabel.anchor = GridBagConstraints.NORTH;
	gbc_DeckListLabel.insets = new Insets(0, 0, 5, 0);
	gbc_DeckListLabel.gridx = 0;
	gbc_DeckListLabel.gridy = 0;
	DeckListPanel.add(DeckListLabel, gbc_DeckListLabel);
	
	
	//Card List
	JList<String> deckCardsList = new JList<String>();
	theList = new ArrayList<String>();
	addMagicCardsToList(collection);
	deckCardsList.setModel(new AbstractListModel<String>() {
		String[] values = theList.toArray(new String[0]);
		public int getSize() {
			return values.length;
		}
		public String getElementAt(int index) {
			return values[index];
		}
	});
	GridBagConstraints gbc_DeckCardsList = new GridBagConstraints();
	gbc_DeckCardsList.gridx = 0;
	gbc_DeckCardsList.gridy = 1;
	DeckListPanel.add(deckCardsList, gbc_DeckCardsList);
	
	//QUERY REGION
	
	JPanel QueryCardPanel = new JPanel();
	contentPane.add(QueryCardPanel, BorderLayout.EAST);
	GridBagLayout gbl_QueryCardPanel = new GridBagLayout();
	gbl_QueryCardPanel.columnWidths = new int[]{96, 0};
	gbl_QueryCardPanel.rowHeights = new int[]{14, 20, 0, 0};
	gbl_QueryCardPanel.columnWeights = new double[]{1.0, Double.MIN_VALUE};
	gbl_QueryCardPanel.rowWeights = new double[]{0.0, 0.0, 1.0, Double.MIN_VALUE};
	QueryCardPanel.setLayout(gbl_QueryCardPanel);
	
	JLabel QueryCardLabel = new JLabel("Card Search");
	GridBagConstraints gbc_QueryCardLabel = new GridBagConstraints();
	gbc_QueryCardLabel.insets = new Insets(0, 0, 5, 0);
	gbc_QueryCardLabel.gridx = 0;
	gbc_QueryCardLabel.gridy = 0;
	QueryCardPanel.add(QueryCardLabel, gbc_QueryCardLabel);
	
	searchBar = new JTextField();
	GridBagConstraints gbc_textField = new GridBagConstraints();
	gbc_textField.insets = new Insets(0, 0, 5, 0);
	gbc_textField.anchor = GridBagConstraints.SOUTHWEST;
	gbc_textField.gridx = 0;
	gbc_textField.gridy = 1;
	QueryCardPanel.add(searchBar, gbc_textField);
	searchBar.setColumns(10);
	
	//THE QUERY LIST
	queryCardList = new ArrayList<String>();
	
	JList<String> qL = new JList<String>();
	qL.setModel(new AbstractListModel<String>() {
		String[] values = queryCardList.toArray(new String[0]);
		public int getSize() {
			return values.length;
		}
		public String getElementAt(int index) {
			return values[index];
		}	
	});
	
	GridBagConstraints gbc_list = new GridBagConstraints();
	gbc_list.gridx = 0;
	gbc_list.gridy = 2;
	QueryCardPanel.add(qL, gbc_list);
	
	JPanel CardImagePanel = new JPanel();
	contentPane.add(CardImagePanel, BorderLayout.CENTER);
	CardImagePanel.setLayout(null);
	
	JLabel cardImage = new JLabel("");
	cardImage.setBounds(54,0,400,400);
	CardImagePanel.add(cardImage);
	
    searchBar.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if(searchBar.getText().isEmpty()){
                queryCardList.clear();
            }else {
                queryCardList.clear();
                Scraper scraper = new Scraper();
                queryCardSearchList = scraper.queryCards(searchBar.getText());
                for (int i = 0; i < queryCardSearchList.size(); i++) {
                    qL.addElement(queryCardSearchList.get(i).cardName);
                }
            }
        }
    });

    MouseListener qlListListener = new MouseAdapter() {
        public void mouseClicked(MouseEvent mouseEvent) {
            JList<MagicCard> oList = (JList) mouseEvent.getSource();
            if (mouseEvent.getClickCount() == 2) {
                int index = oList.locationToIndex(mouseEvent.getPoint());
                if (index >= 0) {
                    try {
                        cardImage.setIcon(new ImageIcon(resize(new URL(queryCardList.get(index).cardImage), new Dimension(330,400))));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }

                }
            }
        }
    };

    deckCardsList.addListSelectionListener(new ListSelectionListener() {
		
		@Override
		public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
            	int index = deckCardsList.getSelectedIndex();
            	if(index > -1) {
                    try {
                        cardImage.setIcon(new ImageIcon(resize(new URL(collection.cardList.get(index).cardImage), new Dimension(330,400))));
                    } catch (IOException e1) {
                        throw new RuntimeException(e1);
                    }
            	}
            }
		}
	});

    qL.addMouseListener(qlListListener);
    }


	public void addMagicCardsToList(CardCollection collection){
        for(int i=0;i<collection.cardList.size();i++){
            theList.add(collection.getCard(i).cardName + "    Price: " + collection.getCard(i).price);
        }
    }

    public BufferedImage resize(final URL url, final Dimension size) throws IOException{
        final BufferedImage image = ImageIO.read(url);
        final BufferedImage resized = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_ARGB);
        final Graphics2D g = resized.createGraphics();
        g.drawImage(image, 0, 0, size.width, size.height, null);
        g.dispose();
        return resized;
    }

}
